<<<<<<< HEAD
import SupabaseClient from '@supabase/supabase-js/src/SupabaseClient';
import type { GenericSchema, SupabaseClientOptions } from '@supabase/supabase-js/src/lib/types';
=======
import SupabaseClient from './SupabaseClient';
import type { GenericSchema, SupabaseClientOptions } from './lib/types';
>>>>>>> HomePage
export * from '@supabase/auth-js';
export type { User as AuthUser, Session as AuthSession } from '@supabase/auth-js';
export { type PostgrestResponse, type PostgrestSingleResponse, type PostgrestMaybeSingleResponse, PostgrestError, } from '@supabase/postgrest-js';
export { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, type FunctionInvokeOptions, FunctionRegion, } from '@supabase/functions-js';
export * from '@supabase/realtime-js';
<<<<<<< HEAD
export { default as SupabaseClient } from '@supabase/supabase-js/src/SupabaseClient';
export type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from '@supabase/supabase-js/src/lib/types';
=======
export { default as SupabaseClient } from './SupabaseClient';
export type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from './lib/types';
>>>>>>> HomePage
/**
 * Creates a new Supabase Client.
 */
export declare const createClient: <Database = any, SchemaName extends string & keyof Database = "public" extends keyof Database ? "public" : string & keyof Database, Schema extends GenericSchema = Database[SchemaName] extends GenericSchema ? Database[SchemaName] : any>(supabaseUrl: string, supabaseKey: string, options?: SupabaseClientOptions<SchemaName> | undefined) => SupabaseClient<Database, SchemaName, Schema>;
//# sourceMappingURL=index.d.ts.map